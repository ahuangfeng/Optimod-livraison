package lhexanome.optimodlivraison.ui.panel;

import lhexanome.optimodlivraison.platform.models.Delivery;
import lhexanome.optimodlivraison.platform.models.DeliveryOrder;
import lhexanome.optimodlivraison.platform.models.RoadMap;
import lhexanome.optimodlivraison.ui.component.DeliveryCellRenderer;
import lhexanome.optimodlivraison.ui.controller.DeliveryOrderController;

import javax.swing.*;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Vector;

/**
 * Delivery order panel.
 */
public class DeliveryOrderPanel extends AbstractPanel {

    /**
     * Content panel.
     */
    private JPanel contentPane;

    /**
     * Button to load delivery order.
     */
    private JButton loadDeliveryOrderButton;

    /**
     * List displaying all the deliveries.
     */
    private JList<Delivery> deliveryList;

    /**
     * Label for the start hour of a warehouse.
     */
    private JLabel startHour;

    /**
     * Cell renderer.
     */
    private DeliveryCellRenderer cellRenderer;

    /**
     * Current delivery order.
     */
    private DeliveryOrder deliveryOrder;

    /**
     * Constructor.
     *
     * @param controller Delivery order controller
     */
    public DeliveryOrderPanel(DeliveryOrderController controller) {
        super(controller);
        setup();
    }

    /**
     * {@link AbstractPanel#setup()}.
     */
    @Override
    public void setup() {
        cellRenderer = new DeliveryCellRenderer(DeliveryCellRenderer.Context.DELIVERY_ORDER);
        deliveryList.setCellRenderer(cellRenderer);

        deliveryList.addListSelectionListener(e ->
                ((DeliveryOrderController) controller).selectDeliveryFromList(deliveryList.getSelectedValue()));
        loadDeliveryOrderButton.addActionListener(e -> ((DeliveryOrderController) controller).reloadDeliveryOrder());
    }

    /**
     * Delivery order setter.
     * Called by the controller.
     *
     * @param newDeliveryOrder Delivery order
     * @param roadMap          roadMap
     */
    public void setData(DeliveryOrder newDeliveryOrder, RoadMap roadMap) {
        this.deliveryOrder = newDeliveryOrder;

        if (newDeliveryOrder == null) {
            // We create an empty model because removeAll() bug...
            deliveryList.setListData(new Vector<>(0));
            startHour.setText("");
            this.cellRenderer.setRoadMap(null);
        } else {
            this.cellRenderer.setRoadMap(roadMap);

            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("HH'h'mm");
            startHour.setText(simpleDateFormat.format(newDeliveryOrder.getStart()));

            Vector<Delivery> deliveries = new Vector<>(newDeliveryOrder.getDeliveries());

            deliveryList.setListData(deliveries);
        }
    }

    /**
     * Select a delivery on the jlist.
     *
     * @param selectValue Selected delivery
     */
    public void selectDeliveryFromMap(Delivery selectValue) {
        if (selectValue == null) {
            deliveryList.clearSelection();
        } else {
            deliveryList.setSelectedValue(selectValue, true);
        }
    }

    /**
     * {@link AbstractPanel#getContentPane()}.
     */
    @Override
    public JPanel getContentPane() {
        return contentPane;

        // Disable Checkstyle for generated code
        //CHECKSTYLE:OFF
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(30);
        scrollPane1.setVerticalScrollBarPolicy(20);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipadx = 10;
        gbc.insets = new Insets(5, 10, 5, 10);
        contentPane.add(scrollPane1, gbc);
        deliveryList = new JList();
        deliveryList.setLayoutOrientation(0);
        deliveryList.setSelectionMode(0);
        scrollPane1.setViewportView(deliveryList);
        loadDeliveryOrderButton = new JButton();
        loadDeliveryOrderButton.setHideActionText(false);
        loadDeliveryOrderButton.setHorizontalTextPosition(0);
        loadDeliveryOrderButton.setText("Charger demande de livraison");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.ipadx = 5;
        gbc.ipady = 5;
        gbc.insets = new Insets(5, 50, 5, 50);
        contentPane.add(loadDeliveryOrderButton, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel1, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, 16, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(2);
        label1.setText("Demande de livraisons");
        label1.setVerticalAlignment(0);
        panel1.add(label1, BorderLayout.NORTH);
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, Font.ITALIC, -1, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Heure de dÃ©part : ");
        panel1.add(label2, BorderLayout.WEST);
        startHour = new JLabel();
        startHour.setHorizontalTextPosition(10);
        startHour.setText("");
        panel1.add(startHour, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
